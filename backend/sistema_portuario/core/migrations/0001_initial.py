# Generated by Django 2.2.6 on 2019-11-02 02:17

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [("auth", "0011_update_proxy_permissions")]

    operations = [
        migrations.CreateModel(
            name="Empresa",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "cnpj",
                    models.CharField(max_length=255, unique=True, verbose_name="CNPJ"),
                ),
                (
                    "nome_fantasia",
                    models.CharField(max_length=255, verbose_name="Nome fantasia"),
                ),
                (
                    "razao_social",
                    models.CharField(max_length=255, verbose_name="Razão social"),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="E-mail"
                    ),
                ),
                (
                    "telefone",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Telefone"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Endereco",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "linha_1",
                    models.CharField(
                        help_text="Rua, avenida, etc.",
                        max_length=255,
                        verbose_name="Linha 1",
                    ),
                ),
                ("cidade", models.CharField(max_length=255, verbose_name="Cidade")),
                (
                    "regiao",
                    models.CharField(
                        help_text="Estado, província, etc.",
                        max_length=255,
                        verbose_name="Região",
                    ),
                ),
                (
                    "codigo_postal",
                    models.CharField(max_length=255, verbose_name="Código postal"),
                ),
                ("pais", models.CharField(max_length=255, verbose_name="País")),
            ],
            options={"verbose_name": "endereço", "verbose_name_plural": "endereços"},
        ),
        migrations.CreateModel(
            name="Navio",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "numero_imo",
                    models.CharField(
                        max_length=255, unique=True, verbose_name="Número IMO"
                    ),
                ),
                ("nome", models.CharField(max_length=255, verbose_name="Nome")),
                (
                    "estado_bandeira",
                    models.CharField(max_length=255, verbose_name="Estado de bandeira"),
                ),
                (
                    "comprimento_metros",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Comprimento em metros"
                    ),
                ),
                (
                    "largura_metros",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Largura em metros"
                    ),
                ),
                (
                    "numero_de_tripulantes",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Número de tripulantes"
                    ),
                ),
                (
                    "porte_bruto_toneladas",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Porte bruto em toneladas"
                    ),
                ),
                (
                    "empresa",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="navios",
                        to="core.Empresa",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Porto",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "un_locode",
                    models.CharField(
                        max_length=255, unique=True, verbose_name="UN/LOCODE"
                    ),
                ),
                ("nome", models.CharField(max_length=255, verbose_name="Nome")),
                (
                    "capacidade_teus_anuais",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Capacidade em TEUs anuais"
                    ),
                ),
                (
                    "endereco",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="core.Endereco",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TipoCarga",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nome",
                    models.CharField(max_length=255, unique=True, verbose_name="Nome"),
                ),
                (
                    "unidade",
                    models.CharField(
                        help_text="kg, L, m3, etc.",
                        max_length=255,
                        verbose_name="Símbolo da unidade de medida",
                    ),
                ),
            ],
            options={
                "verbose_name": "tipo de carga",
                "verbose_name_plural": "tipos de carga",
            },
        ),
        migrations.CreateModel(
            name="Viagem",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("codigo", models.CharField(max_length=255, verbose_name="Código")),
                (
                    "data_chegada",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Data de chegada"
                    ),
                ),
                (
                    "data_atracacao",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Data de atracação"
                    ),
                ),
                (
                    "data_liberacao",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Data de liberação"
                    ),
                ),
                (
                    "data_saida",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Data de saída"
                    ),
                ),
                (
                    "navio",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="viagens",
                        to="core.Navio",
                    ),
                ),
                (
                    "porto_origem",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="viagens",
                        to="core.Porto",
                        verbose_name="Porto de origem",
                    ),
                ),
            ],
            options={"verbose_name": "viagem", "verbose_name_plural": "viagens"},
        ),
        migrations.AddField(
            model_name="navio",
            name="tipos_de_carga_suportados",
            field=models.ManyToManyField(
                blank=True,
                related_name="_navio_tipos_de_carga_suportados_+",
                to="core.TipoCarga",
                verbose_name="Tipos de carga suportados",
            ),
        ),
        migrations.AddField(
            model_name="empresa",
            name="endereco",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="core.Endereco",
            ),
        ),
        migrations.CreateModel(
            name="Carga",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("quantidade", models.PositiveIntegerField(verbose_name="Quantidade")),
                (
                    "tipo",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="core.TipoCarga",
                    ),
                ),
                (
                    "viagem",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="cargas",
                        to="core.Viagem",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Usuario",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=30, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "cpf",
                    models.CharField(max_length=255, unique=True, verbose_name="CPF"),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="E-mail"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[("objects", django.contrib.auth.models.UserManager())],
        ),
    ]
